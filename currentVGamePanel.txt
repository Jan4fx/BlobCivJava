import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

public class GamePanel extends JPanel {
    private List<Dot> redDots;
    private Dot blueDot1;
    private Dot blueDot2;
    private Random rand;
    private int redSpawnCounter;
    private static final int SCREEN_WIDTH = 800;
    private static final int SCREEN_HEIGHT = 600;


    public GamePanel() {
        redDots = new ArrayList<>();
        rand = new Random();
        redSpawnCounter = getRandomSpawnTime();

        blueDot1 = new Dot(new Point(rand.nextInt(800), rand.nextInt(600)), 15, Color.BLUE);
        blueDot2 = new Dot(new Point(rand.nextInt(800), rand.nextInt(600)), 15, Color.BLUE);

        for (int i = 0; i < 5; i++) {
            redDots.add(new Dot(new Point(rand.nextInt(800), rand.nextInt(600)), 5, Color.RED));
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        blueDot1.draw(g2d);
        blueDot2.draw(g2d);

        for (Dot dot : redDots) {
            dot.draw(g2d);
        }
    }

    public void update() {
        // Update both blue dots
        updateBlueDot(blueDot1);
        updateBlueDot(blueDot2);
        
        redSpawnCounter--;
        if (redSpawnCounter <= 0) {
            redDots.add(new Dot(new Point(rand.nextInt(SCREEN_WIDTH), rand.nextInt(SCREEN_HEIGHT)), 5, Color.RED));
            redSpawnCounter = getRandomSpawnTime();
        }

        repaint();
    }

    private void updateBlueDot(Dot blueDot) {
        if (blueDot != null && blueDot.getTarget() != null) {
            double distanceToTarget = blueDot.getPosition().distance(blueDot.getTarget().getPosition());
            if (distanceToTarget <= 5) {
                redDots.remove(blueDot.getTarget());
                blueDot.setSize(blueDot.getSize() + 15);
                blueDot.setTarget(null);
            }
        }

        double minDistance = Double.MAX_VALUE;
        Dot nearestRedDot = null;
        for (Dot redDot : redDots) {
            double distance = blueDot.getPosition().distance(redDot.getPosition());
            if (distance < minDistance) {
                minDistance = distance;
                nearestRedDot = redDot;
            }
        }

        if (nearestRedDot != null) {
            blueDot.setTarget(nearestRedDot);
        }

        if (blueDot.getTarget() != null) {
            blueDot.moveTowardsTarget();
        }
    }

    private int getRandomSpawnTime() {
        return 1000 * (rand.nextInt(3) + 1);  // 1 to 3 seconds
    }
}
